#!/bin/bash

# Git credential helper for Bitwarden
# Usage: git config credential.helper '/path/to/git-credential-bitwarden'

set -e

# Bitwarden item organization:
# - Item name: "Git - {Provider} - {Context}" (e.g., "Git - GitHub - Personal")
# - Username field: Git username
# - Password field: PAT/token
# - Custom field "provider": github.com, gitlab.com, etc.
# - Custom field "context": personal, work, etc.

# Read Git's credential request from stdin
read_input() {
    while IFS='=' read -r key value; do
        case "$key" in
            protocol) protocol="$value" ;;
            host) host="$value" ;;
            username) username="$value" ;;
            password) password="$value" ;;
            path) path="$value" ;;
        esac
    done
}

# Get credentials from Bitwarden
get_credentials() {
    local host="$1"
    local context="$2"
    
    # Ensure Bitwarden is unlocked
    if ! bw status | grep -q "unlocked"; then
        echo "Error: Bitwarden vault is locked. Run: bw unlock" >&2
        exit 1
    fi
    
    # Search for item by provider and context
    local item_name="Git - ${host^} - ${context^}"
    local item=$(bw get item "$item_name" 2>/dev/null)
    
    if [ -z "$item" ]; then
        # Fallback: search by custom fields
        local items=$(bw list items --search "git" | jq -r ".[] | select(.fields[]?.name == \"provider\" and .fields[]?.value == \"$host\") | select(.fields[]?.name == \"context\" and .fields[]?.value == \"$context\") | @base64")
        
        if [ -n "$items" ]; then
            item=$(echo "$items" | head -n1 | base64 -d)
        fi
    fi
    
    if [ -z "$item" ]; then
        echo "Error: No credentials found for $host ($context)" >&2
        exit 1
    fi
    
    # Extract username and password
    local bw_username=$(echo "$item" | jq -r '.login.username // empty')
    local bw_password=$(echo "$item" | jq -r '.login.password // empty')
    
    echo "username=$bw_username"
    echo "password=$bw_password"
}

# Determine context from current directory or config
get_context() {
    local pwd=$(pwd)
    
    # Check directory patterns
    if [[ "$pwd" == *"/repos/personal/"* ]]; then
        echo "personal"
    elif [[ "$pwd" == *"/repos/work/"* ]]; then
        echo "work"
    else
        # Fallback: check git config for context hint
        local context=$(git config --get credential.bitwarden.context 2>/dev/null || echo "personal")
        echo "$context"
    fi
}

# Main logic
main() {
    local action="$1"
    
    case "$action" in
        get)
            read_input
            local context=$(get_context)
            get_credentials "$host" "$context"
            ;;
        store|erase)
            # For now, we don't store/erase in Bitwarden via git
            # These would need to be managed manually in Bitwarden
            read_input  # consume input
            ;;
        *)
            echo "Usage: $0 {get|store|erase}" >&2
            exit 1
            ;;
    esac
}

# Check dependencies
if ! command -v bw >/dev/null 2>&1; then
    echo "Error: Bitwarden CLI not found. Install with: npm install -g @bitwarden/cli" >&2
    exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq not found. Install with: sudo pacman -S jq" >&2
    exit 1
fi

main "$@"
